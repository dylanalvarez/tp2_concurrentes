parameters (flags CLI):

    MAX_REQUESTS =
        Cantidad máxima de pedidos a los sitios web (requests) a procesar de forma concurrente.

    MIN_TIME_BETWEEN_REQUESTS =
        Tiempo de espera mínimo entre dos invocaciones al mismo sitio de sinónimos.

    LIBRARY =
        {stdlib, actix}

-------------

parte A:

        (usar Mutex, RwLock, Semáforos (del crate std-semaphore), Channels, Barriers y Condvars)


    main (if LIBRARY == stdlib)
        sem = semaphor(MAX_REQUESTS)

        condvar_webster<se puede?> = true;
        channel_webster;
        sleeper_webster
            channel_webster.recibo_mensaje "arranco request"
            sleep MIN_TIME_BETWEEN_REQUESTS
            condvar_webster.se_puede
            condvar_webster.notify_all

        channel_joiner;
        result_joiner
            main_result<{word: {synonym: count}}> = {}
            channel_joiner.recibo_mensaje {word, synonym}
                main_result[word][synonym] += 1
            channel_joiner.recibo_mensaje "ya estan todos"
                return main_result

        channel_logger;
        logger
            channel_logger.recibo_mensaje "logueame esto"
                escribe al archivo
            channel_logger.recibo_mensaje "ya estan todos"
                return

        readlines(file) { |word|
            main_result[word] = {}
            spawn get_synonyms(&word, &main_result[word], &sem)
                spawn(3) fetch(&main_result[word], &sem)
                    aquire sem
                    wait while not condvar_webster.se_puede
                    condvar_webster.se_puede = false
                    channel_webster.send "arranco request"
                    request
                    release sem
                    channel_joiner.send {word, synonym}
                join de los 3 fetch
        }
        join de get_synonyms para cada word
        channel_joiner.envio_mensaje "ya estan todos"
        channel_logger.envio_mensaje "ya estan todos"
        join result_joiner -> imprimir el result


-------------
parte B:
    main (if LIBRARY == actix)
        main_addr = Main.start()
        main_addr.send(Init)

message Synonyms {
    (word, synonyms[])
}
message FindSynonyms {
    word
}
message Finish {
}
message Init {
}
message ProviderFinished {
}
message InitRequest {
    provider_addr
}
message SendRequest {
    provider_addr,
    url,
    word
}

// Se deberia iniciar con SyncArbiter::start(MAX_REQUESTS, || HttpRequester);
// Con eso ya limitaria la cantidad de mensajes procesados por este actor en paralelo
actor HttpRequester {
    attribute: logger_addr<Logger>

    handler<msg: SendRequest> {
        resp_http = call_http(msg.url, msg.word)
    }
}

actor ProviderXCoordinator {
    attribute: let sleep = tokio::time::sleep(Duration::from_millis(0));
               tokio::pin!(sleep);

    handler<msg: InitRequest> {
        tokio::select! {
            () = &mut sleep => {
                // Queda bloqueado y entra recien cuando haya pasado el tiempo del sleep
                msg.provider_addr.send(ExecuteRequest)
                sleep.as_mut().reset(Instant::now() + Duration::from_millis(MIN_TIME_BETWEEN_REQUESTS));
            },
        }
    }
}

actor ProviderX {
    attribute: logger_addr<Logger>
    attribute: coordinator_addr<ProviderXCoordinator>
    attribute: http_requester_addr<HttpRequester>

    handler<FindSynonyms> {
        coordinator_addr.send(InitRequest(self.addr))
    }
    handler<ExecuteRequest> {
        http_requester_addr.send(SendRequest)
    }
}
actor GlobalResult {
    attribute: synonyms<Hashmap<String, Hashmap<String, int>>>

    handler<msg: Synonyms> {
        crear/incrementar contadores por cada sinonimo en self.synonyms[msg[word]]
    }
    handler<msg: Finish> {
        print self.synonyms
    }
}
actor Main {
    attribute: num_words
    attribute: num_processed_words
    attribute: num_providers
    attribute: result_addr
    attribute: logger_addr
    attribute: providers_addr

    handler<Init> {
       res_addr = GlobalResult.start()
       log_addr = Logger.start()
       http_requester_addr = SyncArbiter::start(MAX_REQUESTS, || HttpRequester)
       // Probablemente esto sea un actor Provider con distintos params
       providers_addr[0] = ProviderX{http_requester_addr, res_addr, log_addr, ctx.addr}.start()
       providers_addr[1] = ProviderY{http_requester_addr, res_addr, log_addr, ctx.addr}.start()
       providers_addr[2] = ProviderZ{http_requester_addr, res_addr, log_addr, ctx.addr}.start()
       num_providers = providers_addr.len()

       readlines(file) { |word|
            num_words += 1
            providers_addr[0].send(FindSynonyms(word))
            providers_addr[1].send(FindSynonyms(word))
            providers_addr[2].send(FindSynonyms(word))
       }
    }

    handler<ProviderFinished> {
        num_processed_words += 1
        if (num_words * num_providers == num_processed_words * num_providers) {
            res_addr.send(Finish)
        }
    }
}

actor Logger {}